<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsLACYnBCgSFhcOIiMRExQAHikBAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAACx0CHh8gISIXDiIjEQgkAAMLAyUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AwMAEhYXGBkaEBscCgAAAwABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgMADQ4PEBESExQA
        AgsVAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMABgcICQoAAAMLBQwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQACAAAAAAADBAMFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>